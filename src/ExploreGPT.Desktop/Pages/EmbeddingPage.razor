@page "/embed"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject IOpenAIService openAiService
<h3>Embedding API</h3>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form">
                <MudTextField T="string" Label="Prompt" Lines="5" @bind-Value="InputPrompt" Required="true" RequiredError="please type prompt!" />
                <MudSelect T="string" @bind-Value="SelectedModel" Label="Models" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@(Models.CurieSimilarityFast)" />
                    <MudSelectItem Value="@(Models.TextSimilarityAdaV1)" />
                    <MudSelectItem Value="@(Models.TextSimilarityBabbageV1)" />
                    <MudSelectItem Value="@(Models.TextSimilarityCurieV1)" />
                    <MudSelectItem Value="@(Models.TextSimilarityDavinciV1)" />
                    <MudSelectItem Value="@(Models.TextSearchAdaDocV1)" />
                    <MudSelectItem Value="@(Models.TextSearchBabbageDocV1)" />
                    <MudSelectItem Value="@(Models.TextSearchCurieDocV1)" />
                    <MudSelectItem Value="@(Models.TextSearchDavinciDocV1)" />
                    <MudSelectItem Value="@(Models.TextSearchAdaQueryV1)" />
                    <MudSelectItem Value="@(Models.TextSearchBabbageQueryV1)" />
                    <MudSelectItem Value="@(Models.TextSearchCurieQueryV1)" />
                    <MudSelectItem Value="@(Models.TextSearchDavinciQueryV1)" />               
                    <MudSelectItem Value="@(Models.CodeSearchAdaCodeV1)" />
                    <MudSelectItem Value="@(Models.CodeSearchBabbageCodeV1)" />
                    <MudSelectItem Value="@(Models.CodeSearchAdaTextV1)" />
                    <MudSelectItem Value="@(Models.CodeSearchBabbageTextV1)" />
                 
                </MudSelect>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="Submit">Submit</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="Reset" Class="mx-2">Reset</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Results ({results.Count})")</MudText>
                @foreach (var result in results)
            {
                <MudText Color="@Color.Success">@result</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>
@code {
    string SelectedModel = Models.TextSimilarityAdaV1;
    string InputPrompt = "awesome, cool, nice, great, hate, lazy";
    bool success;
    List<string> results = new();

    MudForm form;
    async Task Reset()
    {
        form.Reset();
        results.Clear();
    }
    async Task Submit()
    {
        var param = new EmbeddingCreateRequest()
            {
                Model = SelectedModel,

            };
        if (InputPrompt.Contains(','))
        {
            param.InputAsList = InputPrompt.Split(',').ToList();
        }
        else
        {
            param.Input = InputPrompt;
        }
        var completionResult = await openAiService.Embeddings.CreateEmbedding(param);
        if (completionResult.Successful)
        {
            foreach (var data in completionResult.Data)
            {

                var res = $"index:{data.Index}, embeddings: {string.Join(',', data.Embedding)}";
                Console.WriteLine(res);
                results.Add(res);
            }
        }
        else
        {
            var res = completionResult.Error.Message;
            Console.WriteLine(res);
            results.Add(res);
        }

    }

}